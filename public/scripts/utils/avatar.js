// Avatar & profile image helpers
(function(){
  async function fetchUserProfileImage(){ const accessToken_ = await getAccessToken_NoScopes(); const graphClient = MicrosoftGraph.Client.init({ authProvider: done => done(null, accessToken_) }); graphClient.api('/me/photo/$value').responseType('blob').get().then(blob => { const url = URL.createObjectURL(blob); const img=document.querySelector('.user-profile-image'); if (img) img.src=url; }).catch(e=> console.error('Error fetching profile picture:', e)); }
  function generateAvatarInitials(displayName){ if (!displayName) return 'U'; const names=displayName.trim().split(' '); return names.length===1 ? names[0].charAt(0).toUpperCase() : (names[0].charAt(0)+names[names.length-1].charAt(0)).toUpperCase(); }
  function generateAvatarColor(displayName){ const colors=['#1f77b4','#ff7f0e','#2ca02c','#d62728','#9467bd','#8c564b','#e377c2','#7f7f7f','#bcbd22','#17becf','#aec7e8','#ffbb78','#98df8a','#ff9896','#c5b0d5']; let hash=0; for (let i=0;i<displayName.length;i++){ hash = displayName.charCodeAt(i) + ((hash<<5)-hash);} return colors[Math.abs(hash)%colors.length]; }
  function createAvatarCanvas(displayName, size=24){ const dpr=window.devicePixelRatio||1; const scaled=size*dpr; const canvas=document.createElement('canvas'); const ctx=canvas.getContext('2d'); canvas.width=scaled; canvas.height=scaled; canvas.style.width=size+'px'; canvas.style.height=size+'px'; ctx.scale(dpr,dpr); ctx.imageSmoothingEnabled=true; ctx.imageSmoothingQuality='high'; const radius=size*0.1; ctx.fillStyle=generateAvatarColor(displayName); ctx.beginPath(); if (ctx.roundRect){ ctx.roundRect(0,0,size,size,radius);} else { ctx.moveTo(radius,0); ctx.lineTo(size-radius,0); ctx.quadraticCurveTo(size,0,size,radius); ctx.lineTo(size,size-radius); ctx.quadraticCurveTo(size,size,size-radius,size); ctx.lineTo(radius,size); ctx.quadraticCurveTo(0,size,0,size-radius); ctx.lineTo(0,radius); ctx.quadraticCurveTo(0,0,radius,0); ctx.closePath(); } ctx.fill(); ctx.fillStyle='#fff'; const fontSize=Math.max(Math.floor(size*0.45),10); ctx.font=`bold ${fontSize}px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif`; ctx.textAlign='center'; ctx.textBaseline='middle'; ctx.shadowColor='rgba(0,0,0,.3)'; ctx.shadowOffsetX=0; ctx.shadowOffsetY=1; ctx.shadowBlur=1; ctx.fillText(generateAvatarInitials(displayName), size/2, size/2); return canvas.toDataURL('image/png'); }
  const avatarCache = new Map();
  async function fetchUserAvatar(userId, displayName){ const organization=$('#organization-select').val(); if (!organization || !userId){ return createAvatarCanvas(displayName); } if (avatarCache.has(userId)) return avatarCache.get(userId); const url=`https://dev.azure.com/${organization}/_api/_common/identityImage?id=${userId}&size=2`; try { const authHeaders=await generateAuthHeaders(usePAT); const resp=await fetch(url,{ method:'GET', headers: authHeaders }); if (resp.ok){ const blob=await resp.blob(); const oUrl=URL.createObjectURL(blob); avatarCache.set(userId, oUrl); return oUrl; } } catch(e){ console.debug('Failed to fetch avatar image:', e); } return createAvatarCanvas(displayName); }
  function updateAssigneeDropdownAvatars(){ const $opts=$('.select2-container--open .select2-user-option'); $opts.each(function(){ const $o=$(this); const userId=$o.attr('data-user-id'); const dn=$o.attr('data-display-name'); const $img=$o.find('.select2-user-image'); if (userId && userId!=='current-user' && $img.length>0 && !avatarCache.has(userId)){ fetchUserAvatar(userId, dn).then(url=> { avatarCache.set(userId,url); $img.attr('src', url); }).catch(()=>{}); } else if (avatarCache.has(userId)){ $img.attr('src', avatarCache.get(userId)); } }); }
  function prefetchAssigneeAvatars(max=40){ if (typeof usePAT!=='undefined' && usePAT) return; const $options=$('#assigned-to-select option'); let count=0; $options.each(function(){ if (count>=max) return false; const userId=$(this).data('user-id'); const dn=$(this).data('display-name'); if (userId && userId!=='current-user' && !avatarCache.has(userId)){ setTimeout(()=> { fetchUserAvatar(userId, dn).catch(()=>{}); }, count*50); count++; } }); }
  function cleanupAvatarCache(){ try { avatarCache.forEach((url)=> { if (typeof url==='string' && url.startsWith('blob:')) URL.revokeObjectURL(url); }); avatarCache.clear(); } catch(_){} }
  window.fetchUserProfileImage = fetchUserProfileImage;
  window.generateAvatarInitials = generateAvatarInitials;
  window.generateAvatarColor = generateAvatarColor;
  window.createAvatarCanvas = createAvatarCanvas;
  window.fetchUserAvatar = fetchUserAvatar;
  window.updateAssigneeDropdownAvatars = updateAssigneeDropdownAvatars;
  window.prefetchAssigneeAvatars = prefetchAssigneeAvatars;
  window.cleanupAvatarCache = cleanupAvatarCache;
  window.avatarCache = avatarCache;
})();
